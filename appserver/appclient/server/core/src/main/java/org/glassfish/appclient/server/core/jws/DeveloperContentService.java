/*
 * Copyright (c) 2024 Contributors to the Eclipse Foundation.
 * Copyright (c) 1997, 2018 Oracle and/or its affiliates. All rights reserved.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0, which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the
 * Eclipse Public License v. 2.0 are satisfied: GNU General Public License,
 * version 2 with the GNU Classpath Exception, which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 */

package org.glassfish.appclient.server.core.jws;

import com.sun.enterprise.module.bootstrap.StartupContext;

import jakarta.inject.Inject;
import jakarta.inject.Singleton;

import java.io.File;
import java.util.List;

import org.glassfish.api.admin.ServerEnvironment;
import org.glassfish.hk2.api.PostConstruct;
import org.jvnet.hk2.annotations.Service;

import static org.glassfish.embeddable.GlassFishVariable.INSTALL_ROOT;

/**
 * Maintains the in-memory representation for the customization points of
 * the Java Web Start JNLP that a developer might provide inside his or her
 * app client.  During deployment, if such custom JNLP exists in the
 * app client being deployed then the server combines that developer-provided
 * JNLP with the server-generated JNLP to produce the JNLP document that
 * is used for launching the app client.
 * <p>
 * There are two aspects to this combination: merging the JNLP XML data itself
 * and detecting and recording places in the developer-provided JNLP which
 * refer to other resources - JARs, native libraries, other JNLP documents.
 * <p>
 * The on-disk config file contains property settings for both types of
 * XPath information.  This service makes sure that the in-memory data is
 * up-to-date with respect to the on-disk file.  The server installation
 * includes the config file in the installations's config directory.  But for
 * unusual circumstances, this class looks for the config file
 * first in the domain's config directory and, if it is not there or is there
 * but is not readable, then tries to read the file from the installations's
 * config directory.  Note that even if the installation's config is more
 * recent than the domain's config this class will always prefer the domain's
 * config file if it exists and is readable.
 *
 * @author tjquinn
 */
@Service
@Singleton
public class DeveloperContentService implements PostConstruct {


    /** for locating the installation's client JNLP config file */
    @Inject
    private StartupContext startupContext;

    /** for locating the domain's client JNLP config file (if any) */
    @Inject
    private ServerEnvironment serverEnv;

    /** the always-current data reflecting what is in the on-disk file */
    private ClientJNLPConfigData configData;

    @Override
    public void postConstruct() {
        configData = new ClientJNLPConfigData(installConfigDir(), domainConfigDir());
    }

    private File installConfigDir() {
        return new File(startupContext.getArguments().getProperty(INSTALL_ROOT.getPropertyName()), "config");
    }

    private File domainConfigDir() {
        return serverEnv.getConfigDirPath();
    }

    /**
     * Returns the XPath-related objects for references to other resources
     * that might exist in the developer's JNLP.
     *
     * @return XPathToDeveloperProvidedContentRefs objects for reference sites
     */
    List<XPathToDeveloperProvidedContentRefs> xPathsToDevContentRefs() {
        return configData.xPathsToDevContentRefs();
    }

    /**
     * Returns the XPath-related objects for combining parts of the JNLP from
     * the developer with the JNLP generated by the server.
     *
     * @return CombinedXPath objects for JNLP sites to be combined
     */
    List<CombinedXPath> xPathsToCombinedContent() {
        return configData.xPathsToCombinedContent();
    }
}
