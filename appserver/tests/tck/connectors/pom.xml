<?xml version="1.0" encoding="UTF-8"?>
<!--

    Copyright (c) 2021, 2025 Contributors to the Eclipse Foundation. All rights reserved.

    This program and the accompanying materials are made available under the
    terms of the Eclipse Public License v. 2.0, which is available at
    http://www.eclipse.org/legal/epl-2.0.

    This Source Code may also be made available under the following Secondary
    Licenses when the conditions for such availability set forth in the
    Eclipse Public License v. 2.0 are satisfied: GNU General Public License,
    version 2 with the GNU Classpath Exception, which is available at
    https://www.gnu.org/software/classpath/license.html.

    SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0

-->

<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <parent>
        <groupId>org.glassfish.main.tests.tck</groupId>
        <artifactId>tck</artifactId>
        <version>7.1.0-SNAPSHOT</version>
    </parent>

    <artifactId>glassfish-external-tck-connectors</artifactId>
    <packaging>pom</packaging>

    <name>TCK: Connectors</name>

    <properties>
        <ant.home>${project.build.directory}/apache-ant-${ant.version}</ant.home>
        <ant.zip.url>https://archive.apache.org/dist/ant/binaries/apache-ant-${ant.version}-bin.zip</ant.zip.url>

        <tck.home>${project.build.directory}/connectors-tck</tck.home>
        <tck.tests.home>${tck.home}/src/com/sun/ts/tests/connector</tck.tests.home>
    </properties>

    <dependencies>
        <dependency>
            <groupId>org.glassfish.main.distributions</groupId>
            <artifactId>glassfish</artifactId>
            <type>zip</type>
        </dependency>
        <dependency>
            <groupId>org.glassfish.main.tests.tck</groupId>
            <artifactId>jakarta-connectors-tck</artifactId>
            <version>${project.version}</version>
            <type>zip</type>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <plugin>
                <groupId>io.github.download-maven-plugin</groupId>
                <artifactId>download-maven-plugin</artifactId>
                <executions>
                    <execution>
                        <id>download-ant</id>
                        <phase>generate-resources</phase>
                        <goals>
                            <goal>wget</goal>
                        </goals>
                    </execution>
                </executions>
                <configuration>
                    <skip>${skipITs}</skip>
                    <url>${ant.zip.url}</url>
                    <unpack>true</unpack>
                    <outputDirectory>${project.build.directory}</outputDirectory>
                </configuration>
            </plugin>

            <plugin>
                <artifactId>maven-dependency-plugin</artifactId>
                <configuration>
                    <skip>${skipITs}</skip>
                </configuration>
                <executions>
                    <execution>
                        <id>unpack-glassfish</id>
                        <phase>pre-integration-test</phase>
                        <goals>
                            <goal>unpack-dependencies</goal>
                        </goals>
                        <configuration>
                            <includeArtifactIds>glassfish</includeArtifactIds>
                            <outputDirectory>${project.build.directory}</outputDirectory>
                        </configuration>
                    </execution>
                    <execution>
                        <id>unpack-tck</id>
                        <phase>pre-integration-test</phase>
                        <goals>
                            <goal>unpack-dependencies</goal>
                        </goals>
                        <configuration>
                            <includeArtifactIds>jakarta-connectors-tck</includeArtifactIds>
                            <outputDirectory>${project.build.directory}</outputDirectory>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

            <plugin>
                <artifactId>maven-antrun-plugin</artifactId>
                <dependencies>
                    <dependency>
                        <groupId>org.apache.ant</groupId>
                        <artifactId>ant</artifactId>
                        <version>${ant.version}</version>
                    </dependency>
                    <dependency>
                        <groupId>ant-contrib</groupId>
                        <artifactId>ant-contrib</artifactId>
                        <version>1.0b3</version>
                        <exclusions>
                            <exclusion>
                                <groupId>ant</groupId>
                                <artifactId>ant</artifactId>
                            </exclusion>
                        </exclusions>
                    </dependency>
                </dependencies>
                <configuration>
                    <skip>${skipITs}</skip>
                </configuration>
                <executions>
                    <execution>
                        <id>prepare-tck-and-glassfish</id>
                        <phase>pre-integration-test</phase>
                        <goals>
                            <goal>run</goal>
                        </goals>
                        <configuration>
                            <target xmlns:if="ant:if" xmlns:unless="ant:unless">
                                <taskdef resource="net/sf/antcontrib/antcontrib.properties"
                                     classpathref="maven.plugin.classpath" />

                                <macrodef name="tck-property-update">
                                    <attribute name="key" />
                                    <attribute name="value" />
                                    <sequential>
                                      <replaceregexp byline="true"
                                        file="${tck.home}/bin/ts.jte"
                                        match="@{key}=.*"
                                        replace="@{key}=@{value}" />
                                    </sequential>
                                </macrodef>
                                <macrodef name="tck-line-update">
                                    <attribute name="pattern" />
                                    <attribute name="replacement" />
                                    <sequential>
                                      <replaceregexp byline="true"
                                        file="${tck.home}/bin/ts.jte"
                                        match="@{pattern}"
                                        replace="@{replacement}" />
                                    </sequential>
                                </macrodef>
                                <macrodef name="tck-keystore-suffix">
                                    <attribute name="file" />
                                    <sequential>
                                        <replaceregexp flags="g"
                                          file="@{file}"
                                          match="/cacerts\.jks"
                                          replace="/cacerts.p12" />
                                        <replaceregexp flags="g"
                                          file="@{file}"
                                          match="/keystore\.jks"
                                          replace="/keystore.p12" />
                                    </sequential>
                                </macrodef>

                                <tck-line-update
                                    pattern="^(.*/)admin-cli.jar(.*)"
                                    replacement="\1hk2.jar:${jaspic.home}/modules/jakarta.activation-api.jar\2" />
                                <tck-line-update
                                    pattern="^(.*\$\{JAVA_HOME\}/bin/java)(.*)"
                                    replacement="\1 --module-path ${jaspic.home}/lib/bootstrap --add-modules ALL-MODULE-PATH \2" />

                                <tck-property-update key="connector.home" value="${glassfish.home}/glassfish"/>
                                <tck-property-update key="harness.log.traceflag" value="true"/>
                                <tck-property-update key="s1as.jvm.options" value="-Dj2eelogin.name=${user}:-Dj2eelogin.password=${password}"/>

                                <tck-property-update key="glassfish.admin.port" value="${port.admin}"/>
                                <tck-property-update key="s1as.admin.port" value="${port.admin}"/>
                                <tck-property-update key="database.port" value="${port.derby}"/>
                                <tck-property-update key="orb.port" value="${port.orb}"/>
                                <tck-property-update key="webServerHost" value="localhost"/>
                                <tck-property-update key="webServerPort" value="${port.http}"/>
                                <tck-property-update key="securedWebServicePort" value="${port.https}"/>
                                <tck-property-update key="harness.log.port" value="${port.harness.log}"/>

                                <tck-property-update key="report.dir" value="${tck.home}/connectorsreport/connectors"/>
                                <tck-property-update key="work.dir" value="${tck.home}/connectorswork/connectors"/>

                                <replace file="${tck.home}/bin/ts.jte">
                                    <replacetoken><![CDATA[-XX\\\:MaxPermSize=512m:]]></replacetoken>
                                    <replacevalue><![CDATA[]]></replacevalue>
                                </replace>

                                <tck-keystore-suffix file="${tck.home}/bin/xml/impl/glassfish/common.xml" />
                                <tck-keystore-suffix file="${tck.home}/bin/xml/impl/glassfish/s1as.xml" />

                                <limit maxwait="60">
                                    <exec executable="${glassfish.asadmin}" dir="${glassfish.home}/glassfish/bin">
                                        <env key="AS_JAVA" value="${java.home}"/>
                                        <arg value="delete-domain"/>
                                        <arg value="domain1" />
                                    </exec>
                                    <exec executable="${glassfish.asadmin}" dir="${glassfish.home}/glassfish/bin" failonerror="true">
                                        <env key="AS_JAVA" value="${java.home}"/>
                                        <arg value="create-domain"/>
                                        <arg value="--domainproperties=domain.adminPort=${port.admin}:domain.instancePort=${port.http}:http.ssl.port=${port.https}:jms.port=${port.jms}:domain.jmxPort=${port.jmx}:orb.listener.port=${port.orb}:orb.ssl.port=${port.orb.ssl}:orb.mutualauth.port=${port.orb.mutual}" />
                                        <arg value="--user=admin" />
                                        <arg value="--nopassword" />
                                        <arg value="domain1" />
                                    </exec>
                                    <exec executable="${glassfish.asadmin}" dir="${glassfish.home}/glassfish/bin" failonerror="true">
                                        <env key="AS_JAVA" value="${java.home}"/>
                                        <arg value="start-domain"/>
                                    </exec>

                                    <if>
                                        <isset property="jacoco.version" />
                                        <then>
                                            <exec executable="${glassfish.asadmin}" dir="${glassfish.home}/glassfish/bin" failonerror="true">
                                                <env key="AS_JAVA" value="${java.home}"/>
                                                <arg value="create-jvm-options" />
                                                <arg value="--port=${port.admin}" />
                                                <arg value="&quot;-javaagent\:${settings.localRepository}/org/jacoco/org.jacoco.agent/${jacoco.version}/org.jacoco.agent-${jacoco.version}-runtime.jar=destfile=${project.build.directory}/jacoco-it.exec,includes=${jacoco.includes}&quot;" />
                                            </exec>
                                        </then>
                                    </if>

                                    <exec executable="${glassfish.asadmin}" dir="${glassfish.home}/glassfish/bin" failonerror="true">
                                        <env key="AS_JAVA" value="${java.home}"/>
                                        <arg value="stop-domain"/>
                                        <arg value="domain1"/>
                                    </exec>
                                </limit>

                                <mkdir dir="${tck.home}/connectorsreport"/>
                                <mkdir dir="${tck.home}/connectorsreport/connectors"/>
                            </target>
                        </configuration>
                    </execution>

                    <execution>
                        <id>configure-tck-tests</id>
                        <phase>pre-integration-test</phase>
                        <goals>
                            <goal>run</goal>
                        </goals>
                        <configuration>
                            <target xmlns:if="ant:if" xmlns:unless="ant:unless">
                                <taskdef resource="net/sf/antcontrib/antcontrib.properties"
                                         classpathref="maven.plugin.classpath" />
                                <limit maxwait="20">
                                    <exec executable="${glassfish.asadmin}" dir="${glassfish.home}/glassfish/bin" failonerror="true">
                                        <env key="AS_JAVA" value="${java.home}"/>
                                        <arg value="start-domain"/>
                                    </exec>
                                </limit>

                                <exec executable="${ant.home}/bin/ant" dir="${tck.home}/bin" failonerror="true">
                                    <env key="AS_JAVA" value="${java.home}"/>
                                    <env key="JAVA_HOME" value="${java.home}"/>
                                    <arg value="config.vi"  />
                                </exec>

                                <!-- Deploy single test -->
                                <sequential if:set="run.test" >
                                    <dirname property="test.dir" file="${tck.home}/src/${run.test}"/>
                                    <echo>Deploying from ${test.dir}</echo>

                                    <exec executable="${ant.home}/bin/ant" dir="${test.dir}" failonerror="true">
                                        <env key="AS_JAVA" value="${java.home}"/>
                                        <env key="JAVA_HOME" value="${java.home}"/>
                                        <arg value="deploy"  />
                                    </exec>
                                </sequential>

                                <!-- Deploy all tests -->
                                <sequential unless:set="run.test" >
                                    <exec executable="${ant.home}/bin/ant" dir="${tck.tests.home}" failonerror="true">
                                        <env key="AS_JAVA" value="${java.home}"/>
                                        <env key="JAVA_HOME" value="${java.home}"/>
                                        <arg value="deploy.all"  />
                                    </exec>
                                </sequential>
                            </target>
                        </configuration>
                    </execution>

                     <execution>
                        <id>run-tck-tests</id>
                        <phase>integration-test</phase>
                        <goals>
                            <goal>run</goal>
                        </goals>
                        <configuration>
                            <target xmlns:if="ant:if" xmlns:unless="ant:unless">
                                <taskdef resource="net/sf/antcontrib/antcontrib.properties"
                                         classpathref="maven.plugin.classpath" />
                                <echo level="info" message="Start running all tests" />
                                <exec executable="${ant.home}/bin/ant" dir="${tck.home}/bin" resultproperty="testResult">
                                    <env key="AS_JAVA" value="${java.home}"/>
                                    <env key="JAVA_HOME" value="${java.home}"/>
                                    <arg value="-Dmultiple.tests=${run.test}" if:set="run.test" />
                                    <arg value="runclient.nobinaryfinder" if:set="run.test" />
                                    <arg value="run.all" unless:set="run.test" />
                                    <env key="LC_ALL" value="C" />
                                </exec>

                                <exec executable="${glassfish.asadmin}" dir="${glassfish.home}/glassfish/bin">
                                    <env key="AS_JAVA" value="${java.home}"/>
                                    <arg value="stop-domain" />
                                </exec>

                                <if>
                                    <not>
                                        <equals arg1="${testResult}" arg2="0" />
                                    </not>
                                    <then>
                                        <echo message="Running tests failed." />
                                        <loadfile property="contents" srcFile="${glassfish.home}/glassfish/domains/domain1/logs/server.log" />
                                        <fail status="${testResult}" message="${contents}" />
                                    </then>
                                </if>
                            </target>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>
</project>
